name: CI/CD Pipeline for TeeTime Store - GCP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GCP_REGION: us-central1
  GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  GCR_REPOSITORY: teetime-store
  SERVICE_NAME: teetime-store-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify required files exist
        run: |
          echo "Checking required files..."
          if [ ! -f "src/index.html" ]; then
            echo "‚ùå ERROR: src/index.html not found"
            exit 1
          fi
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå ERROR: Dockerfile not found"
            exit 1
          fi
          if [ ! -f "nginx.conf" ]; then
            echo "‚ùå ERROR: nginx.conf not found"
            exit 1
          fi
          echo "‚úÖ All required files present"

      - name: Test HTML syntax
        run: |
          echo "Testing HTML structure..."
          if ! grep -q "<!DOCTYPE html>" src/index.html; then
            echo "‚ùå ERROR: Missing DOCTYPE in index.html"
            exit 1
          fi
          if ! grep -q "<title>" src/index.html; then
            echo "‚ùå ERROR: Missing title tag in index.html"
            exit 1
          fi
          echo "‚úÖ HTML structure test passed"

      - name: Test Docker build
        run: |
          echo "Testing Docker build..."
          docker build -t teetime-test .
          echo "‚úÖ Docker build test passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.GCR_REPOSITORY }}:latest .
          docker tag ${{ env.GCR_REPOSITORY }}:latest us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.GCR_REPOSITORY }}/app:latest
          docker tag ${{ env.GCR_REPOSITORY }}:latest us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.GCR_REPOSITORY }}/app:${{ github.sha }}

      - name: Push Docker image to GCR
        run: |
          docker push us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.GCR_REPOSITORY }}/app:latest
          docker push us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.GCR_REPOSITORY }}/app:${{ github.sha }}

      - name: Save GCR image URI
        run: |
          echo "IMAGE_URI=us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.GCR_REPOSITORY }}/app:${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.GCR_REPOSITORY }}/app:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 80 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 1 \
            --timeout 300s

      - name: Get Service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --format 'value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          echo "üöÄ Application deployed: $SERVICE_URL"

  success-notification:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Deployment Success
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Application URL: ${{ env.SERVICE_URL }}"
          echo "üìä View logs at: https://console.cloud.google.com/run"